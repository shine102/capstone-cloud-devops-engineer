version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

# commands:
#   destroy-environment:
#     description: "Destroy the cloudformation stacks with contain vpc, eks cluster given the workflow id"
#   parameters:
#     workflow_id:
#       type: string
#   steps:
#     - run:
#         name: Destroy environments
#         when: on-fail
#         command: |
#           aws cloudformation delete-stack --stack-name "shine102-<< parameters.workflow_id >>-EKS" --region $AWS_REGION
#           aws cloudformation delete-stack --stack-name "shine102-<< parameters.workflow_id >>-VPC" --region $AWS_REGION

jobs:
  lint-test: 
    docker:
      - image: python:latest
    steps:
      - checkout
      - restore_cache:
          key: pip-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            make setup
            make install
      - save_cache:
          key: pip-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - .venv
      
      - run:
          name: run lint
          command: |
            make setup
            make lint

      - run:
          name: run test
          command: |
            make setup
            make test
  
  build-docker:
    docker:
      - image: circleci/python:latest
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: build docker image
          command: |
            docker build -t $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:${CIRCLE_WORKFLOW_ID:0:7} .
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:${CIRCLE_WORKFLOW_ID:0:7}

  test-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster
  
  deploy-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deploy-kubernetes/deployment.yaml
          resource-name: deploy-kubernetes/deployment

workflows:
  default:
    jobs:
      - lint-test
      - build-docker:
          requires: [lint-test]
      - aws-eks/create-cluster:
          cluster-name: "shine102-<< pipeline.id >>-EKS"
          requires: [build-docker]
      - test-cluster:
          requires: [aws-eks/create-cluster]
          cluster-name: "shine102-<< pipeline.id >>-EKS"
          filters:
            branches:
              only: master
      # - deploy-cluster:
      #     requires: [create-cluster]
      #     cluster-name: "shine102-<< pipeline.id >>-EKS"
      #     context: "shine102-eks"
      #     filters:
      #       branches:
      #         only: master
      
      

