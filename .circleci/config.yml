version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  lint-test: 
    docker:
      - image: python:latest
    steps:
      - checkout
      - restore_cache:
          key: pip-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            make setup
            make install
      - save_cache:
          key: pip-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - .venv
      
      - run:
          name: run lint
          command: |
            make setup
            make lint

      - run:
          name: run test
          command: |
            make setup
            make test
  
  build-docker:
    docker:
      - image: circleci/python:latest
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: build docker image ver1
          command: |
            docker build -t $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:${CIRCLE_WORKFLOW_ID:0:7}_ver1 ./ver1
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:${CIRCLE_WORKFLOW_ID:0:7}_ver1
      - run: 
          name: build docker image ver2
          command: |
            docker build -t $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:${CIRCLE_WORKFLOW_ID:0:7}_ver2 ./ver2
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:${CIRCLE_WORKFLOW_ID:0:7}_ver2
  create-k8s:
    docker:
      - image: 'circleci/python:latest'
    steps:
      - checkout
      - aws-eks/create-cluster:
          cluster-name: "shine102-${CIRCLE_WORKFLOW_ID:0:7}-EKS"
          node-type: t3.medium
          nodes: 1
  
  deploy-application:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-ver1:
        description: |
          Docker image to build
        type: string
      docker-image-ver2:
        description: |
          Docker image to build
        type: string
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            sudo apt-get install -y sed curl jq
      - run:
          name: create deployment.yaml
          command: |
            cat deploy-kubernetes/deployment.yaml.template | sed "s|DOCKER_IMAGE|<< parameters.docker-image-ver1 >>|g" > deploy-kubernetes/deployment-ver1.yaml
            cat deploy-kubernetes/deployment-v2.yaml.template | sed "s|DOCKER_IMAGE|<< parameters.docker-image-ver2 >>|g" > deploy-kubernetes/deployment-ver2.yaml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:  
          get-rollout-status: true
          resource-file-path: deploy-kubernetes/deployment-ver1.yaml
          resource-name: deployment/demoapp
          show-kubectl-command: true
      - kubernetes/create-or-update-resource:  
          get-rollout-status: true
          resource-file-path: deploy-kubernetes/deployment-ver2.yaml
          resource-name: deployment/demoapp-v2
          show-kubectl-command: true
      - kubernetes/create-or-update-resource:
          resource-file-path: deploy-kubernetes/service.yaml
          show-kubectl-command: true
      - kubernetes/create-or-update-resource:
          resource-file-path: deploy-kubernetes/service-v2.yaml
          show-kubectl-command: true
      # - run: 
      #     name: create policy
      #     command: |
      #       aws iam create-policy \
      #       --policy-name AWSLoadBalancerControllerIAMPolicy \
      #       --policy-document file://iam_policy.json
      - run:
          name: create IAM OIDC
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl utils associate-iam-oidc-provider --cluster << parameters.cluster-name >> --approve --region=ap-southeast-1
      - run: 
          name: create load-balancer-role-trust-policy.json
          command: |
            export oidc_id=$(aws eks describe-cluster --name << parameters.cluster-name >> --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)
            cat load-balancer-role-trust-policy.json.template | sed "s|OIDC-ID|$oidc_id|g" > load-balancer-role-trust-policy.json
      - run: 
          name: create IAM role 
          command: |
            aws iam create-role \
            --role-name AmazonEKSLoadBalancerControllerRole \
            --assume-role-policy-document file://"load-balancer-role-trust-policy.json"
      - run:
          name: attach IAM policy
          command: |
            aws iam attach-role-policy \
            --policy-arn arn:aws:iam::809868205509:policy/AWSLoadBalancerControllerIAMPolicy \
            --role-name AmazonEKSLoadBalancerControllerRole
      - run: 
          name: create aws-load-balancer-controller service account
          command: |
            kubectl apply -f aws-load-balancer-controller-service-account.yaml
      - run:
          name: fix error
          command: |
            eksctl delete iamserviceaccount --cluster << parameters.cluster-name >> --name=aws-load-balancer-controller
            eksctl create iamserviceaccount \
            --cluster=<< parameters.cluster-name >> \
            --name=aws-load-balancer-controller \
            --attach-policy-arn="arn:aws:iam::809868205509:policy/AWSLoadBalancerControllerIAMPolicy" \
            --override-existing-serviceaccounts \
            --approve
      - run: 
          name: download helm
          command: |
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
            chmod 700 get_helm.sh
            ./get_helm.sh
      - run:
          name: install aws-load-balancer-controller
          command: |
            helm repo add eks https://aws.github.io/eks-charts
            helm repo update
            kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
            helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            --set clusterName=<< parameters.cluster-name >> \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller
      - run: 
          name: verify aws-load-balancer-controller installation
          command: |
            for i in {1..3};
            do
              kubectl get deployment aws-load-balancer-controller -o json | jq -r '.status.conditions[] | select(.type=="Available") | .status'
              if [ $? -eq 2 ]; then
                break
              fi
              sleep 5
            done
      - kubernetes/create-or-update-resource:
          resource-file-path: deploy-kubernetes/ingress-blue.yaml
          show-kubectl-command: true
      - run:
          name: test external ip
          command: |
            kubectl get all
            kubectl get ingress -o json | jq -r '.items[0].status.loadBalancer.ingress[0].hostname' 
            export URL=http://`kubectl get ingress -o json | jq -r '.items[0].status.loadBalancer.ingress[0].hostname'`
            echo $URL
            for i in {1..5};
            do
              curl $URL
            done

  # switch-version: 
  switch-version:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "shine102-${CIRCLE_WORKFLOW_ID:0:7}-EKS"
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: deploy-kubernetes/ingress-green.yaml
          show-kubectl-command: true
      - run:
          name: test external ip
          command: |
            kubectl get all
            kubectl get ingress -o json | jq -r '.items[0].status.loadBalancer.ingress[0].hostname'
            export URL=http://`kubectl get ingress -o json | jq -r '.items[0].status.loadBalancer.ingress[0].hostname'`
            echo $URL
            for i in {1..5};
            do
              curl $URL
            done

  # clean-up:
  clean-up: 
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "shine102-${CIRCLE_WORKFLOW_ID:0:7}-EKS"
          install-kubectl: true
      - kubernetes/delete-resource:
          resource-file-path: deploy-kubernetes/deployment-ver1.yaml
          show-kubectl-command: true

workflows:
  default:
    jobs:
      - lint-test
      - build-docker:
          requires: [lint-test]
      - create-k8s:
          requires: [build-docker]
      - deploy-application:
          requires: [create-k8s]
          cluster-name: "shine102-${CIRCLE_WORKFLOW_ID:0:7}-EKS"
          docker-image-ver1: $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:${CIRCLE_WORKFLOW_ID:0:7}_ver1
          docker-image-ver2: $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:${CIRCLE_WORKFLOW_ID:0:7}_ver2
          filters:
            branches:
              only: master
      - switch-version:
          requires: [deploy-application]
          filters:
            branches:
              only: master
      - clean-up:
          requires: [switch-version]
          filters:
            branches:
              only: master


